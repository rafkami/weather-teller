{"version":3,"sources":["components/Header.js","components/Form.js","components/Result.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Form","props","className","onSubmit","submit","dist_default","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","renderSuggestion","inputProps","placeholder","value","onChange","change","Result","city","country","temp","icon","description","sunrise","sunset","pressure","wind","map","error","clear","toggleMap","content","source","concat","onClick","charAt","toUpperCase","slice","indexOf","src","alt","id","Footer","google","window","weatherAPIKey","timezoneAPIKey","IPToken","googleAPIKey","cityList","require","getSuggestions","inputValue","trim","toLowerCase","replace","inputLength","length","filter","name","suggestion","_ref","query","isHighlighted","App","state","latitude","longitude","err","componentDidMount","IPAPI","fetch","then","response","status","json","Error","data","_this","setState","catch","console","log","prevState","handleInputChange","e","_ref2","newValue","method","_ref3","handleSubmit","_callee","whereIDStarts","inputID","ifIDmatches","weatherAPI","timezoneAPI","regenerator_default","wrap","_context","prev","next","preventDefault","find","toString","cityIDcheck","sys","coord","lat","lon","main","toFixed","weather","speed","result","timezone","gmtOffset","Date","toLocaleTimeString","abrupt","sent","stop","handleClear","handleToggleMap","getGoogleMaps","googleMapsPromise","Promise","resolve","resolveGoogleMapsPromise","script","document","async","defer","body","appendChild","componentDidUpdate","prevProps","showMap","getElementById","place","lng","newMap","maps","Map","zoom","center","Marker","position","style","height","_this$state","this","components_Header","components_Form","components_Result","components_Footer","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.853c4668.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h2>Weather-Teller</h2>\r\n      <h3>\r\n        Find out what's going on outside without looking through your window!\r\n      </h3>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../styles/Form.css\";\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"search-wrapper\">\r\n      <form onSubmit={props.submit}>\r\n      <Autosuggest\r\n        suggestions={props.suggestions}\r\n        onSuggestionsFetchRequested={props.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={props.onSuggestionsClearRequested}\r\n        getSuggestionValue={props.getSuggestionValue}\r\n        renderSuggestion={props.renderSuggestion}\r\n        inputProps={{placeholder: \"provide city name\", value: props.value, onChange: props.change}} \r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"../styles/Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    city,\r\n    country,\r\n    temp,\r\n    icon,\r\n    description,\r\n    sunrise,\r\n    sunset,\r\n    pressure,\r\n    wind,\r\n    map,\r\n    error,\r\n    clear,\r\n    toggleMap\r\n  } = props;\r\n\r\n  let content = null;\r\n\r\n  const source = `https://openweathermap.org/img/w/${icon}.png`;\r\n\r\n  if (!error && city) {\r\n    content = (\r\n      <div className=\"result-container\">\r\n        <div className=\"result-wrapper\">\r\n          <button onClick={clear}>Clear</button>\r\n          <h2>\r\n            In {city.charAt(0).toUpperCase() + city.slice(1, city.indexOf(\",\"))}\r\n            , {country}, the weather right now is as follows:\r\n          </h2>\r\n          <img src={source} alt=\"Weather icon\" />\r\n          <h3>\r\n            It is <span>{`${temp}${\"\\xB0\"}`}C</span> and {description}\r\n          </h3>\r\n          <h3>\r\n            Sunrise at <span>{sunrise}</span>\r\n          </h3>\r\n          <h3>\r\n            Sunset at <span>{sunset}</span>\r\n          </h3>\r\n          <h3>\r\n            Wind speed: <span>{wind} m/s</span>\r\n          </h3>\r\n          <h3>\r\n            Atmospheric pressure: <span>{pressure} hPa</span>\r\n          </h3>\r\n        </div>\r\n        <div className=\"result-map-wrapper\">\r\n          <button onClick={toggleMap}>\r\n            {map ? \"Hide map\" : \"Show on map\"}\r\n          </button>\r\n          <div id=\"result-map\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      {error ? (\r\n        <h2 className=\"result__neg-message\">{`There is no such a city in our database :(`}</h2>\r\n      ) : (\r\n        content\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return <footer>by Rafkami &#169;</footer>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Footer from \"./Footer\";\nimport \"../styles/App.css\";\n\n//  some initial variables\n\nconst google = window.google;\n\nconst weatherAPIKey = \"bfae98d5c94c0d9269ea9eb5224e2693\";\nconst timezoneAPIKey = \"VS7P90IJ8KL9\";\nconst IPToken = \"6e867cc4cd3a5e\";\nconst googleAPIKey = \"AIzaSyBl3efYiJYIr2sYmV99VSlGfQNLr8EK5FM\";\n\n// preparation for getting suggestions in Form component, using downloaded DB of cities\n\nconst cityList = require(\"../data/citylist.json\");\n\nconst getSuggestions = value => {\n  const escapeRegexCharacters = str =>\n    str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n  const inputValue = escapeRegexCharacters(value.trim().toLowerCase());\n  const inputLength = inputValue.length;\n\n  return inputValue === \"\"\n    ? []\n    : cityList\n        .filter(\n          city => city.name.toLowerCase().slice(0, inputLength) === inputValue\n        )\n        .slice(0, 50);\n};\n\nconst getSuggestionValue = suggestion =>\n  `${suggestion.name}, id: ${suggestion.id}`;\n\nconst renderSuggestion = (suggestion, { query, isHighlighted }) => (\n  <div>\n    {suggestion.name}, {suggestion.country}\n  </div>\n);\n\n// the one and only class component\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    suggestions: [],\n    city: \"\",\n    country: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    temp: \"\",\n    icon: \"\",\n    description: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    wind: \"\",\n    pressure: \"\",\n    map: false,\n    err: false\n  };\n\n  // starting with user's IP location in input field\n\n  componentDidMount = () => {\n    const IPAPI = `//ipinfo.io/json?token=${IPToken}`;\n    fetch(IPAPI)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else throw Error(\"Cannot set your location\");\n      })\n      .then(data => {\n        this.setState({\n          value: data.city\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n\n  // handling with changes in input field w/ reseting the weather details for previous searching output\n\n  handleInputChange = (e, { newValue, method }) => {\n    this.setState({\n      value: newValue,\n      city: \"\",\n      country: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      temp: \"\",\n      icon: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      wind: \"\",\n      pressure: \"\",\n      map: false,\n      err: false\n    });\n  };\n\n  // two functions connected with autosuggest\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  // getting the output for my search\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const whereIDStarts = this.state.value.indexOf(\":\");\n    const inputID = this.state.value.slice(whereIDStarts + 2);\n    const ifIDmatches = cityList.find(city => city.id.toString() === inputID);\n    const cityIDcheck = () =>\n      ifIDmatches ? `id=${ifIDmatches.id}` : `q=${this.state.value}`;\n    const weatherAPI = `http://api.openweathermap.org/data/2.5/weather?${cityIDcheck()}&APPID=${weatherAPIKey}&units=metric`;\n    const timezoneAPI = `http://api.timezonedb.com/v2.1/get-time-zone?key=${timezoneAPIKey}&format=json&by=position&lat=${\n      this.state.latitude\n    }&lng=${this.state.longitude}`;\n\n    await fetch(weatherAPI)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else throw Error(\"Cannot fetch data from server\");\n      })\n      .then(data => {\n        this.setState(prevState => ({\n          suggestions: [],\n          city: prevState.value,\n          country: data.sys.country,\n          latitude: data.coord.lat,\n          longitude: data.coord.lon,\n          temp: data.main.temp.toFixed(1),\n          icon: data.weather[0].icon,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          wind: data.wind.speed.toFixed(1),\n          pressure: data.main.pressure.toFixed(),\n          err: false\n        }));\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n    return await fetch(timezoneAPI)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else throw Error(\"Cannot fetch timezone from server\");\n      })\n      .then(result => {\n        const timezone = result.gmtOffset - 3600;\n        this.setState({\n          sunrise: new Date(\n            (this.state.sunrise + timezone) * 1000\n          ).toLocaleTimeString(),\n          sunset: new Date(\n            (this.state.sunset + timezone) * 1000\n          ).toLocaleTimeString()\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n\n  // clearing the data from both input and result (weather details)\n\n  handleClear = () => {\n    this.setState({\n      value: \"\",\n      suggestions: [],\n      city: \"\",\n      country: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      temp: \"\",\n      icon: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      wind: \"\",\n      pressure: \"\",\n      map: false,\n      err: false\n    });\n  };\n\n  // toggling map visibility available only after searching\n\n  handleToggleMap = () => {\n    this.setState({\n      map: !this.state.map\n    });\n  };\n\n  // promise with a global handler for when API finishes loading, returning a promise for the Google Maps API\n\n  getGoogleMaps = () => {\n    if (!this.googleMapsPromise) {\n      this.googleMapsPromise = new Promise(resolve => {\n        window.resolveGoogleMapsPromise = () => {\n          resolve(google);\n          delete window.resolveGoogleMapsPromise;\n        };\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${googleAPIKey}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        script.defer = true;\n        document.body.appendChild(script);\n      });\n    }\n    return this.googleMapsPromise;\n  };\n\n  // initializing the actual map after loading the Google Maps API\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const showMap = document.getElementById(\"result-map\");\n    if (this.state.map !== prevState.map && this.state.map) {\n      this.getGoogleMaps().then(google => {\n        const place = {\n          lat: this.state.latitude,\n          lng: this.state.longitude\n        };\n        const newMap = new window.google.maps.Map(showMap, {\n          zoom: 12,\n          center: place\n        });\n        const marker = new window.google.maps.Marker({\n          position: place,\n          map: newMap\n        });\n        showMap.style.height = \"400px\";\n      });\n    }\n    if (\n      this.state.map !== prevState.map &&\n      !this.state.map &&\n      this.state.value === prevState.value\n    ) {\n      showMap.style.height = 0;\n    }\n  };\n\n  render() {\n    const {\n      value,\n      suggestions,\n      city,\n      country,\n      temp,\n      icon,\n      description,\n      sunrise,\n      sunset,\n      wind,\n      pressure,\n      map,\n      err\n    } = this.state;\n    return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <Header />\n          <Form\n            value={value}\n            suggestions={suggestions}\n            change={this.handleInputChange}\n            submit={this.handleSubmit}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <Result\n            city={city}\n            country={country}\n            temp={temp}\n            icon={icon}\n            description={description}\n            sunrise={sunrise}\n            sunset={sunset}\n            wind={wind}\n            pressure={pressure}\n            map={map}\n            error={err}\n            clear={this.handleClear}\n            toggleMap={this.handleToggleMap}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}