{"version":3,"sources":["components/maps.js","components/Header.js","components/Form.js","components/Result.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["googleMapsPromise","Header","react_default","a","createElement","Form","props","className","onSubmit","submit","dist_default","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","renderSuggestion","inputProps","placeholder","value","onChange","change","Result","content","city","country","temp","icon","description","sunrise","sunset","pressure","wind","isMapVisible","error","clear","toggleMap","source","concat","onClick","search","charAt","toUpperCase","slice","indexOf","src","alt","id","Footer","google","window","getGoogleMaps","Promise","resolve","resolveGoogleMapsPromise","script","document","process","async","defer","body","appendChild","initialState","latitude","longitude","err","cityList","require","getSuggestions","inputValue","trim","toLowerCase","replace","filter","name","startsWith","suggestion","_ref","query","isHighlighted","App","state","componentDidMount","IPAPI","fetch","then","response","status","json","Error","data","_this","setState","catch","console","log","prevState","handleInputChange","e","_ref2","newValue","method","_ref3","handleSubmit","preventDefault","whereIDStarts","inputID","ifIDmatches","find","toString","weatherAPI","timezoneAPI","coord","lat","lon","result","timezone","gmtOffset","sys","main","toFixed","weather","Date","toLocaleTimeString","speed","handleClear","handleToggleMap","componentDidUpdate","prevProps","showMap","getElementById","place","lng","maps","Map","zoom","center","style","height","_this$state","this","components_Header","components_Form","components_Result","components_Footer","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd9752f5.chunk.js","sourcesContent":["const google = window.google;\r\n\r\nlet googleMapsPromise;\r\n\r\nconst getGoogleMaps = () => {\r\n  if (!googleMapsPromise) {\r\n    googleMapsPromise = new Promise(resolve => {\r\n      window.resolveGoogleMapsPromise = () => {\r\n        resolve(google);\r\n        delete window.resolveGoogleMapsPromise;\r\n      };\r\n      const script = document.createElement(\"script\");\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${\r\n        process.env.REACT_APP_googleAPIKey\r\n      }&callback=resolveGoogleMapsPromise`;\r\n      script.async = true;\r\n      script.defer = true;\r\n      document.body.appendChild(script);\r\n    });\r\n  }\r\n  return googleMapsPromise;\r\n};\r\n\r\nexport { getGoogleMaps };\r\n","import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h2>Weather-Teller</h2>\r\n      <h3>\r\n        Find out what's going on outside without looking through your window!\r\n      </h3>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../styles/Form.css\";\r\nimport Autosuggest from \"react-autosuggest\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"search-wrapper\">\r\n      <form onSubmit={props.submit}>\r\n        <Autosuggest\r\n          suggestions={props.suggestions}\r\n          onSuggestionsFetchRequested={props.onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={props.onSuggestionsClearRequested}\r\n          getSuggestionValue={props.getSuggestionValue}\r\n          renderSuggestion={props.renderSuggestion}\r\n          inputProps={{\r\n            placeholder: \"provide city name\",\r\n            value: props.value,\r\n            onChange: props.change\r\n          }}\r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"../styles/Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    city,\r\n    country,\r\n    temp,\r\n    icon,\r\n    description,\r\n    sunrise,\r\n    sunset,\r\n    pressure,\r\n    wind,\r\n    isMapVisible,\r\n    error,\r\n    clear,\r\n    toggleMap\r\n  } = props;\r\n\r\n  let content;\r\n\r\n  const source = `//openweathermap.org/img/w/${icon}.png`;\r\n\r\n  if (!error && city) {\r\n    content = (\r\n      <div className=\"result-container\">\r\n        <div className=\"result-wrapper\">\r\n          <button onClick={clear}>Clear</button>\r\n          <h2>\r\n            In{\" \"}\r\n            {city.search(\",\") > 0\r\n              ? city.charAt(0).toUpperCase() + city.slice(1, city.indexOf(\",\"))\r\n              : city.charAt(0).toUpperCase() + city.slice(1)}\r\n            , {country}, the weather right now is as follows:\r\n          </h2>\r\n          <img src={source} alt=\"Weather icon\" />\r\n          <h3>\r\n            It is <span>{`${temp}${\"\\xB0\"}`}C</span> and {description}\r\n          </h3>\r\n          <h3>\r\n            Sunrise at <span>{sunrise}</span>\r\n          </h3>\r\n          <h3>\r\n            Sunset at <span>{sunset}</span>\r\n          </h3>\r\n          <h3>\r\n            Wind speed: <span>{wind} m/s</span>\r\n          </h3>\r\n          <h3>\r\n            Atmospheric pressure: <span>{pressure} hPa</span>\r\n          </h3>\r\n        </div>\r\n        <div className=\"result-map-wrapper\">\r\n          <button onClick={toggleMap}>\r\n            {isMapVisible ? \"Hide map\" : \"Show on map\"}\r\n          </button>\r\n          <div id=\"result-map\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      {error ? (\r\n        <h2 className=\"result__neg-message\">{`There is no such a city in our database :(`}</h2>\r\n      ) : (\r\n        content\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return <footer>by Rafkami &#169;</footer>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Footer from \"./Footer\";\nimport \"../styles/App.css\";\nimport { getGoogleMaps } from \"./maps\";\n\n// initial state\n\nconst initialState = {\n  value: \"\",\n  suggestions: [],\n  city: \"\",\n  country: \"\",\n  latitude: \"\",\n  longitude: \"\",\n  temp: \"\",\n  icon: \"\",\n  description: \"\",\n  sunrise: \"\",\n  sunset: \"\",\n  wind: \"\",\n  pressure: \"\",\n  isMapVisible: false,\n  err: false\n};\n\n// preparation for getting suggestions in Form component, using downloaded DB of cities\n\nconst cityList = require(\"../data/citylist.json\");\n\nconst getSuggestions = value => {\n  const escapeRegexCharacters = str =>\n    str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n  const inputValue = escapeRegexCharacters(value.trim().toLowerCase());\n\n  return cityList\n    .filter(city => city.name.toLowerCase().startsWith(inputValue))\n    .slice(0, 50);\n};\n\nconst getSuggestionValue = suggestion =>\n  `${suggestion.name}, id: ${suggestion.id}`;\n\nconst renderSuggestion = (suggestion, { query, isHighlighted }) => (\n  <div>\n    {suggestion.name}, {suggestion.country}\n  </div>\n);\n\n// the one and only class component\n\nclass App extends Component {\n  state = initialState;\n\n  // starting with user's IP location in input field\n\n  componentDidMount = () => {\n    const IPAPI = `//ipinfo.io/json?token=${process.env.REACT_APP_IPToken}`;\n    fetch(IPAPI)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else throw Error(\"Cannot set your location\");\n      })\n      .then(data => {\n        this.setState({\n          value: data.city\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n\n  // handling with changes in input field w/ reseting the weather details for previous searching output\n\n  handleInputChange = (e, { newValue, method }) => {\n    this.setState({\n      value: newValue,\n      city: \"\",\n      country: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      temp: \"\",\n      icon: \"\",\n      description: \"\",\n      sunrise: \"\",\n      sunset: \"\",\n      wind: \"\",\n      pressure: \"\",\n      isMapVisible: false,\n      err: false\n    });\n  };\n\n  // two functions connected with autosuggest\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  // getting the output for my search\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const whereIDStarts = this.state.value.indexOf(\":\");\n    const inputID = this.state.value.slice(whereIDStarts + 2);\n    const ifIDmatches = cityList.find(city => city.id.toString() === inputID);\n    const cityIDcheck = () =>\n      ifIDmatches ? `id=${ifIDmatches.id}` : `q=${this.state.value}`;\n    const weatherAPI = `http://api.openweathermap.org/data/2.5/weather?${cityIDcheck()}&APPID=${\n      process.env.REACT_APP_weatherAPIKey\n    }&units=metric`;\n\n    fetch(weatherAPI)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else throw Error(\"Cannot fetch data from server\");\n      })\n      .then(data => {\n        const timezoneAPI = `http://api.timezonedb.com/v2.1/get-time-zone?key=${\n          process.env.REACT_APP_timezoneAPIKey\n        }&format=json&by=position&lat=${data.coord.lat}&lng=${data.coord.lon}`;\n        fetch(timezoneAPI)\n          .then(response => {\n            if (response.status === 200) {\n              return response.json();\n            } else throw Error(\"Cannot fetch timezone from server\");\n          })\n          .then(result => {\n            const timezone = result.gmtOffset - 3600;\n            this.setState(prevState => ({\n              suggestions: [],\n              city: prevState.value,\n              country: data.sys.country,\n              latitude: data.coord.lat,\n              longitude: data.coord.lon,\n              temp: data.main.temp.toFixed(1),\n              icon: data.weather[0].icon,\n              description: data.weather[0].description,\n              sunrise: new Date(\n                (data.sys.sunrise + timezone) * 1000\n              ).toLocaleTimeString(),\n              sunset: new Date(\n                (data.sys.sunset + timezone) * 1000\n              ).toLocaleTimeString(),\n              wind: data.wind.speed.toFixed(1),\n              pressure: data.main.pressure.toFixed(),\n              err: false\n            }));\n          })\n          .catch(err => {\n            console.log(err);\n            this.setState(prevState => ({\n              err: true,\n              city: prevState.value\n            }));\n          });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n\n  // clearing the data from both input and result (weather details)\n\n  handleClear = () => {\n    this.setState(initialState);\n  };\n\n  // toggling map visibility (available only after searching)\n\n  handleToggleMap = () => {\n    this.setState(prevState => ({\n      isMapVisible: !prevState.isMapVisible\n    }));\n  };\n\n  // initializing the actual map after loading the Google Maps API\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const showMap = document.getElementById(\"result-map\");\n    if (\n      this.state.isMapVisible !== prevState.isMapVisible &&\n      this.state.isMapVisible\n    ) {\n      getGoogleMaps().then(google => {\n        const place = {\n          lat: this.state.latitude,\n          lng: this.state.longitude\n        };\n        const newMap = new window.google.maps.Map(showMap, {\n          zoom: 12,\n          center: place\n        });\n        showMap.style.height = \"400px\";\n      });\n    }\n    if (\n      this.state.isMapVisible !== prevState.isMapVisible &&\n      !this.state.isMapVisible &&\n      this.state.value === prevState.value\n    ) {\n      showMap.style.height = 0;\n    }\n  };\n\n  render() {\n    const {\n      value,\n      suggestions,\n      city,\n      country,\n      temp,\n      icon,\n      description,\n      sunrise,\n      sunset,\n      wind,\n      pressure,\n      isMapVisible,\n      err\n    } = this.state;\n    return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <Header />\n          <Form\n            value={value}\n            suggestions={suggestions}\n            change={this.handleInputChange}\n            submit={this.handleSubmit}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <Result\n            city={city}\n            country={country}\n            temp={temp}\n            icon={icon}\n            description={description}\n            sunrise={sunrise}\n            sunset={sunset}\n            wind={wind}\n            pressure={pressure}\n            isMapVisible={isMapVisible}\n            error={err}\n            clear={this.handleClear}\n            toggleMap={this.handleToggleMap}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />, \n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}